/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MyERC20, MyERC20Interface } from "../MyERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020017f4d79455243323000000000000000000000000000000000000000000000000000815250600090805190602001906200005f929190620001d0565b506040518060400160405280600481526020017f4d4552430000000000000000000000000000000000000000000000000000000081525060019080519060200190620000ad929190620001d0565b50670de0b6b3a76400006003819055506012600260006101000a81548160ff021916908360ff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600354604051620001c2919062000291565b60405180910390a36200031d565b828054620001de90620002b8565b90600052602060002090601f0160209004810192826200020257600085556200024e565b82601f106200021d57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024d57825182559160200191906001019062000230565b5b5090506200025d919062000261565b5090565b5b808211156200027c57600081600090555060010162000262565b5090565b6200028b81620002ae565b82525050565b6000602082019050620002a8600083018462000280565b92915050565b6000819050919050565b60006002820490506001821680620002d157607f821691505b60208210811415620002e857620002e7620002ee565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6113d6806200032d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c57806395d89b411161006657806395d89b41146102165780639dc29fac14610234578063a9059cbb14610250578063dd62ed3e14610280576100cf565b806340c10f19146101ac57806370a08231146101c85780638da5cb5b146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce567146101705780633eaaf86b1461018e575b600080fd5b6100dc6102b0565b6040516100e991906110cb565b60405180910390f35b61010c60048036038101906101079190610ee4565b61033e565b60405161011991906110b0565b60405180910390f35b61012a610430565b604051610137919061116d565b60405180910390f35b61015a60048036038101906101559190610e95565b610484565b60405161016791906110b0565b60405180910390f35b610178610776565b6040516101859190611188565b60405180910390f35b610196610789565b6040516101a3919061116d565b60405180910390f35b6101c660048036038101906101c19190610ee4565b61078f565b005b6101e260048036038101906101dd9190610e30565b6108f8565b6040516101ef919061116d565b60405180910390f35b610200610941565b60405161020d9190611095565b60405180910390f35b61021e610967565b60405161022b91906110cb565b60405180910390f35b61024e60048036038101906102499190610ee4565b6109f5565b005b61026a60048036038101906102659190610ee4565b610be0565b60405161027791906110b0565b60405180910390f35b61029a60048036038101906102959190610e59565b610d7f565b6040516102a7919061116d565b60405180910390f35b600080546102bd906112d1565b80601f01602080910402602001604051908101604052809291908181526020018280546102e9906112d1565b80156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161041e919061116d565b60405180910390a36001905092915050565b6000600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460035461047f9190611215565b905090565b600081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff9061112d565b60405180910390fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906110ed565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106169190611215565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461066c91906111bf565b9250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ff9190611215565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610763919061116d565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108169061114d565b60405180910390fd5b806003600082825461083191906111bf565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461088791906111bf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108ec919061116d565b60405180910390a35050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054610974906112d1565b80601f01602080910402602001604051908101604052809291908181526020018280546109a0906112d1565b80156109ed5780601f106109c2576101008083540402835291602001916109ed565b820191906000526020600020905b8154815290600101906020018083116109d057829003601f168201915b505050505081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c9061114d565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe9061110d565b60405180910390fd5b8060036000828254610b199190611215565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b6f9190611215565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bd4919061116d565b60405180910390a35050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5b9061112d565b60405180910390fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cb39190611215565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d0991906111bf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6d919061116d565b60405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081359050610e1581611372565b92915050565b600081359050610e2a81611389565b92915050565b600060208284031215610e4257600080fd5b6000610e5084828501610e06565b91505092915050565b60008060408385031215610e6c57600080fd5b6000610e7a85828601610e06565b9250506020610e8b85828601610e06565b9150509250929050565b600080600060608486031215610eaa57600080fd5b6000610eb886828701610e06565b9350506020610ec986828701610e06565b9250506040610eda86828701610e1b565b9150509250925092565b60008060408385031215610ef757600080fd5b6000610f0585828601610e06565b9250506020610f1685828601610e1b565b9150509250929050565b610f2981611249565b82525050565b610f388161125b565b82525050565b6000610f49826111a3565b610f5381856111ae565b9350610f6381856020860161129e565b610f6c81611361565b840191505092915050565b6000610f84601d836111ae565b91507f6e6f7420616c6c6f77656420746f2073656e642074686973206d7563680000006000830152602082019050919050565b6000610fc4601c836111ae565b91507f6e6f7420656e6f75676820746f6b656e73206f6e2062616c616e6365000000006000830152602082019050919050565b60006110046011836111ae565b91507f6e6f7420656e6f75676820746f6b656e730000000000000000000000000000006000830152602082019050919050565b60006110446011836111ae565b91507f4d75737420626520746865206f776e65720000000000000000000000000000006000830152602082019050919050565b61108081611287565b82525050565b61108f81611291565b82525050565b60006020820190506110aa6000830184610f20565b92915050565b60006020820190506110c56000830184610f2f565b92915050565b600060208201905081810360008301526110e58184610f3e565b905092915050565b6000602082019050818103600083015261110681610f77565b9050919050565b6000602082019050818103600083015261112681610fb7565b9050919050565b6000602082019050818103600083015261114681610ff7565b9050919050565b6000602082019050818103600083015261116681611037565b9050919050565b60006020820190506111826000830184611077565b92915050565b600060208201905061119d6000830184611086565b92915050565b600081519050919050565b600082825260208201905092915050565b60006111ca82611287565b91506111d583611287565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561120a57611209611303565b5b828201905092915050565b600061122082611287565b915061122b83611287565b92508282101561123e5761123d611303565b5b828203905092915050565b600061125482611267565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156112bc5780820151818401526020810190506112a1565b838111156112cb576000848401525b50505050565b600060028204905060018216806112e957607f821691505b602082108114156112fd576112fc611332565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61137b81611249565b811461138657600080fd5b50565b61139281611287565b811461139d57600080fd5b5056fea26469706673582212201441093754c66f7f1eb60e1d98f460274279de18e9758ecb74f656974d19398464736f6c63430008000033";

type MyERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyERC20__factory extends ContractFactory {
  constructor(...args: MyERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyERC20> {
    return super.deploy(overrides || {}) as Promise<MyERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MyERC20 {
    return super.attach(address) as MyERC20;
  }
  override connect(signer: Signer): MyERC20__factory {
    return super.connect(signer) as MyERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyERC20Interface {
    return new utils.Interface(_abi) as MyERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyERC20 {
    return new Contract(address, _abi, signerOrProvider) as MyERC20;
  }
}
